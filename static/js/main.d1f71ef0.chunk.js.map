{"version":3,"sources":["BlocNotFound404/BlocNotFound404.tsx","BlocTwo/BlocTwo.tsx","CovidBloc/Covid.app.tsx","BlocTree/blocTree.tsx","RenderBloc/RenderBloc.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["blocNotFound","status","title","subTitle","extra","type","to","blocTwo","CovidMainBloc","params","RangePicker","DatePicker","useState","dataNumber","setDataNaber","dataChart","setDataChart","dataAll","setDataAll","dataAllDeaths","setAllDeaths","dataAllRecovered","setAllRecovered","a","console","log","todayNewConfirmed","death","recover","dni","openNotificationError","notification","open","message","description","openNotification","errorCatch","error","fetch","then","res","json","datas","labels","Object","keys","dates","total","today_new_confirmed","today_new_deaths","today_new_recovered","label","push","countries","date","success","catch","e","data","i","length","span","offset","direction","size","onChange","dateString","onClick","bordered","style","width","marginTop","top","ResponsiveContainer","height","LineChart","margin","right","left","bottom","backgroundColor","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","blocTree","Header","Layout","Sider","Content","SiderDemo","state","collapsed","toggle","setState","trigger","collapsible","this","className","theme","mode","defaultSelectedKeys","Item","icon","MedicineBoxOutlined","VideoCameraOutlined","UploadOutlined","paddingLeft","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","padding","minHeight","exact","path","component","BlocNotFound404","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uWAgBeA,EAZM,WAEjB,OACI,cAAC,IAAD,CACAC,OAAO,MACPC,MAAM,MACNC,SAAS,yRACTC,MAAO,cAAC,IAAD,CAAQC,KAAK,UAAb,SAAwB,cAAC,IAAD,CAAMC,GAAG,IAAT,iDCCxBC,EATC,WAEZ,OACI,0C,yKC4GOC,MA3Gf,SAAuBC,GAAc,IAC3BC,EAAgBC,IAAhBD,YAD0B,EAECE,mBAAS,IAFV,mBAE3BC,EAF2B,KAEfC,EAFe,OAGAF,mBAAS,IAHT,mBAG3BG,EAH2B,KAGhBC,EAHgB,OAIJJ,mBAAS,IAJL,mBAI3BK,EAJ2B,KAIlBC,EAJkB,OAKIN,mBAAS,IALb,mBAK3BO,EAL2B,KAKZC,EALY,OAMUR,mBAAS,IANnB,mBAM3BS,EAN2B,KAMTC,EANS,iDAWlC,0CAAAC,EAAA,6DACEC,QAAQC,IAAIZ,EAAW,IACvBW,QAAQC,IAAIZ,EAAW,IAEjBa,EAAyB,GACzBC,EAAa,GACbC,EAAe,GACfC,EAAW,GAGXC,EAA4B,kBAAMC,IAAaC,KAAK,CAACC,QAAQ,0CAAYC,YAAY,0VAD9D,kBAAMH,IAAaC,KAAK,CAAEC,QAAQ,4QAE/DE,GAEMC,EAAiB,WACrBH,IAAQI,MAAM,yCACdP,KAfJ,UAkBQQ,MAAM,2EAAD,OAA4EzB,EAAW,GAAvF,oBAAqGA,EAAW,KACxH0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJlB,QAAQC,IAAIiB,GACZ,IAAMC,EAASC,OAAOC,KAAKH,EAAMI,OAIjC5B,EAAWwB,EAAMK,MAAMC,qBACvB5B,EAAasB,EAAMK,MAAME,kBACzB3B,EAAgBoB,EAAMK,MAAMG,qBAE5B,cAAkBP,EAAlB,eAA0B,CAArB,IAAIQ,EAAK,KACZzB,EAAkB0B,KAAKV,EAAMI,MAAMK,GAAOE,UAAnB,OAAuCL,qBAEhE,cAAkBL,EAAlB,eAA0B,CAArB,IAAIQ,EAAK,KACZxB,EAAMyB,KAAKV,EAAMI,MAAMK,GAAOE,UAAnB,OAAuCJ,kBAEpD,cAAkBN,EAAlB,eAA0B,CAArB,IAAIQ,EAAK,KACZvB,EAAQwB,KAAKV,EAAMI,MAAMK,GAAOE,UAAnB,OAAuCH,qBAEtD,cAAkBP,EAAlB,eAA0B,CAArB,IAAIQ,EAAK,KACZtB,EAAIuB,KAAKV,EAAMI,MAAMK,GAAOE,UAAnB,OAAuCC,MAElDrB,IAAQsB,QAAQ,4FACfC,OAAM,SAACC,GAAD,OAAOrB,OA3CpB,QA8CE,IAFMsB,EAAW,GAERC,EAAI,EAAGA,EAAI9B,EAAI+B,OAAQD,IAC9BD,EAAKN,KAAK,CACR,KAAQvB,EAAI8B,GACZ,oIAA4BjC,EAAkBiC,GAC9C,kHAAyBhC,EAAMgC,GAC/B,sJAA+B/B,EAAQ+B,KAG3C3C,EAAa0C,GACblC,QAAQC,IAAIR,GAvDd,6CAXkC,sBAoElC,OACE,qCACA,cAAC,IAAD,UACI,eAAC,IAAD,CAAK4C,KAAM,GAAIC,OAAQ,EAAvB,UACE,gJACF,eAAC,IAAD,CAAOC,UAAU,WAAWC,KAAM,GAAlC,UACE,cAACtD,EAAD,CAAcuD,SAlEtB,SAAkBX,EAAWY,GAC3BpD,EAAaoD,MAgET,IACuC,cAAC,IAAD,CAAQ7D,KAAK,UAAW8D,QA1EnC,2CA0EW,mIAIzC,cAAC,IAAD,UACE,cAAC,IAAD,CAAKN,KAAM,EAAGC,OAAQ,EAAtB,SACE,eAAC,IAAD,CAAM5D,MAAM,qIAA6BkE,UAAU,EAAOC,MAAO,CAACC,MAAM,IAAMC,UAAU,IAAxF,UACE,oFAAe1D,EAAW,GAA1B,MAAiCA,EAAW,MAC5C,oKAA8BI,KAC9B,kJAA2BE,KAC3B,sLAAiCE,YAIzC,cAAC,IAAD,UACC,cAAC,IAAD,CAAKwC,KAAM,GAAIC,OAAQ,EAAGO,MAAO,CAACG,IAAI,IAAtC,SACE,cAACC,EAAA,EAAD,CAAqBH,MAAM,OAAOI,OAAQ,IAA1C,SACC,eAACC,EAAA,EAAD,CAAWL,MAAO,IAAKI,OAAQ,IAAKhB,KAAM3C,EAAW6D,OAAQ,CAAEJ,IAAK,IAAKK,MAAO,EAAGC,KAAM,EAAGC,OAAQ,GAAKV,MAAO,CAACW,gBAAgB,WAAjI,UACE,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAMnF,KAAK,WAAW+E,QAAQ,oIAA2BK,OAAO,YAChE,cAACD,EAAA,EAAD,CAAMnF,KAAK,WAAW+E,QAAQ,kHAAwBK,OAAO,YAC7D,cAACD,EAAA,EAAD,CAAMnF,KAAK,WAAW+E,QAAQ,sJAA8BK,OAAO,yBC9F9DC,EATE,WAEb,OACI,yCCkBAC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QAmERC,E,4MAhEbC,MAAQ,CACNC,WAAW,G,EAGbC,OAAS,WACP,EAAKC,SAAS,CACZF,WAAY,EAAKD,MAAMC,a,4CAI3B,WACE,OACE,cAAC,IAAD,UACA,eAAC,IAAD,WACE,eAACJ,EAAD,CAAOxB,MAAO,CAACK,OAAO,QAAS0B,QAAS,KAAMC,aAAW,EAACJ,UAAWK,KAAKN,MAAMC,UAAhF,UACE,qBAAKM,UAAU,SACf,eAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,KAAvD,UACE,cAAC,IAAKC,KAAN,CAAmBC,KAAM,cAACC,EAAA,EAAD,IAAzB,SACE,cAAC,IAAD,CAAMvG,GAAG,IAAT,6CADa,KAKf,cAAC,IAAKqG,KAAN,CAAmBC,KAAM,cAACE,EAAA,EAAD,IAAzB,SACE,cAAC,IAAD,CAAMxG,GAAG,IAAT,oBADa,KAKf,cAAC,IAAKqG,KAAN,CAAmBC,KAAM,cAACG,EAAA,EAAD,IAAzB,SACE,cAAC,IAAD,CAAMzG,GAAG,KAAT,oBADa,WAOnB,eAAC,IAAD,CAAQiG,UAAU,cAAlB,UACE,cAACZ,EAAD,CAAQY,UAAU,yBAAyBlC,MAAO,CAAE2C,YAAa,IAAjE,SACGC,IAAMC,cAAcZ,KAAKN,MAAMC,UAAYkB,IAAqBC,IAAkB,CACjFb,UAAW,UACXpC,QAASmC,KAAKJ,WAGlB,cAACJ,EAAD,CACES,UAAU,yBACVlC,MAAO,CACLO,OAAQ,YACRyC,QAAS,GACTC,UAAW,IACXtC,gBAAgB,iBANpB,SASE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,IAAIC,UAAWjH,IACjC,cAAC,IAAD,CAAOgH,KAAK,KAAKC,UAAWlH,IAC5B,cAAC,IAAD,CAAOiH,KAAK,KAAKC,UAAW/B,IAC5B,cAAC,IAAD,CAAO+B,UAAWC,qB,GAvDRT,IAAMU,WCdfC,MATf,WACE,OACE,8BACE,cAAC,EAAD,OCQSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxF,MAAK,YAAkD,IAA/CyF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d1f71ef0.chunk.js","sourcesContent":["import { Result , Button } from 'antd'\r\nimport { Link} from \"react-router-dom\"\r\n\r\nimport 'antd/dist/antd.css';\r\nconst blocNotFound = () => {\r\n\r\n    return (\r\n        <Result\r\n        status='404'\r\n        title='404'\r\n        subTitle='Извините, страницу которую вы посетили не существует.'\r\n        extra={<Button type='primary' ><Link to='/'>Домой</Link></Button>}\r\n        />\r\n    );\r\n}\r\n\r\nexport default blocNotFound;","import 'antd/dist/antd.css';\r\n\r\n\r\nconst blocTwo = () => {\r\n    \r\n    return (\r\n        <div>\r\n            Hellow\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default blocTwo;","import {  useState } from 'react';\r\nimport { LineChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line,ResponsiveContainer  } from 'recharts';\r\nimport 'antd/dist/antd.css';\r\nimport { Button, DatePicker ,Row, Col , Card  ,Space,message,notification  } from 'antd';\r\n\r\n\r\n\r\nfunction CovidMainBloc(params: any) {\r\n  const { RangePicker } = DatePicker;\r\n  const [dataNumber, setDataNaber] = useState([])// получение дат из датапикера \r\n  const [dataChart, setDataChart] = useState([]);// передача статистики в граффик\r\n  const [dataAll, setDataAll] = useState([])\r\n  const [dataAllDeaths, setAllDeaths] = useState([])\r\n  const [dataAllRecovered, setAllRecovered] = useState([])\r\n\r\n  function onChange(date: any, dateString: any) { // получение значения датапикера \r\n    setDataNaber(dateString)\r\n  } \r\n  async function inputValue() { // обработка инпута с данными\r\n    console.log(dataNumber[0]) // проверка приходят ли данные \r\n    console.log(dataNumber[1])\r\n\r\n    const todayNewConfirmed: any = [] // Cтатистика по заболевшим \r\n    const death: any = [] // Cтатистика по умершим\r\n    const recover: any = [] // Cтатистика по выздоровевшим\r\n    const dni: any = [] // массив  дат для отрисовки \r\n      // Уведомления \r\n    const openNotification:any = () => notification.open({ message:'Ожидайте пожалуйста выполняется запрос на сервер'})\r\n    const openNotificationError:any = () => notification.open({message:'ОШИБКА!!!',description:'Проверьте верно ли ввели данные или есть ли соединение с сервером'})\r\n    openNotification()\r\n\r\n    const errorCatch:any = () => {\r\n      message.error('Ошибка!')\r\n      openNotificationError()\r\n    } \r\n         // Запрос \r\n    await fetch(`https://api.covid19tracking.narrativa.com/api/country/russia?&date_from=${dataNumber[0]}&date_to=${dataNumber[1]}`)\r\n      .then(res => res.json())\r\n      .then(datas => {\r\n        console.log(datas)\r\n        const labels = Object.keys(datas.dates);\r\n\r\n        // перебор данных \r\n\r\n        setDataAll(datas.total.today_new_confirmed)\r\n        setAllDeaths(datas.total.today_new_deaths)\r\n        setAllRecovered(datas.total.today_new_recovered)\r\n\r\n        for (let label of labels) {\r\n          todayNewConfirmed.push(datas.dates[label].countries['Russia'].today_new_confirmed);\r\n        }\r\n        for (let label of labels) {\r\n          death.push(datas.dates[label].countries['Russia'].today_new_deaths);\r\n        }\r\n        for (let label of labels) {\r\n          recover.push(datas.dates[label].countries['Russia'].today_new_recovered)\r\n        }\r\n        for (let label of labels) {\r\n          dni.push(datas.dates[label].countries['Russia'].date)\r\n        }\r\n        message.success('Данные получены');\r\n      }).catch((e) => errorCatch());\r\n    const data:any = [] // массив для хука графика\r\n\r\n    for (let i = 0; i < dni.length; i++) { // заполнения формы работы графика \r\n      data.push({\r\n        \"name\": dni[i],\r\n        \"Cтатистика по заболевшим\": todayNewConfirmed[i],\r\n        'Cтатистика по умершим': death[i],\r\n        'Cтатистика по выздоровевшим': recover[i],\r\n      })\r\n    }\r\n    setDataChart(data) // хук графика \r\n    console.log(dataAll) // провека хука \r\n  }\r\n  return (\r\n    <>\r\n    <Row>\r\n        <Col span={12} offset={8}>\r\n          <h1>Статистика по России</h1>\r\n        <Space direction=\"vertical\" size={12}>\r\n          <RangePicker  onChange={onChange} /> <Button type=\"primary\"  onClick={inputValue}>Получить статистику</Button>\r\n        </Space>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={5} offset={8}>\r\n          <Card title='Статистика по всему миру '  bordered={false} style={{width:400 , marginTop:50 }}>\r\n            <h1>За период {dataNumber[0]} - {dataNumber[1]}</h1>\r\n            <p>Cтатистика по заболевшим: {dataAll}</p>\r\n            <p>Cтатистика по умершим: {dataAllDeaths}</p>\r\n            <p>Cтатистика по выздоровевшим: {dataAllRecovered}</p>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    <Row>\r\n     <Col span={12} offset={4} style={{top:20}}>\r\n       <ResponsiveContainer width=\"100%\" height={400}>\r\n        <LineChart width={500} height={300} data={dataChart} margin={{ top: 100, right: 5, left: 5, bottom: 5 }} style={{backgroundColor:'#ffffff'}}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line type=\"monotone\" dataKey=\"Cтатистика по заболевшим\" stroke=\"#8884d8\" />\r\n          <Line type=\"monotone\" dataKey=\"Cтатистика по умершим\" stroke=\"#fe0015\" />\r\n          <Line type=\"monotone\" dataKey=\"Cтатистика по выздоровевшим\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>  \r\n     </Col>\r\n    </Row> \r\n   </>\r\n  )\r\n}\r\nexport default CovidMainBloc;","import 'antd/dist/antd.css';\r\n\r\n\r\nconst blocTree = () => {\r\n    \r\n    return (\r\n        <div>\r\n            World\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default blocTree;","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport '../index.css';\r\n\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  VideoCameraOutlined,\r\n  UploadOutlined,\r\n  MedicineBoxOutlined\r\n} from '@ant-design/icons';\r\n\r\n\r\nimport '../RenderBloc/RenderBloc.css'\r\n\r\n\r\nimport { BrowserRouter as Router, Route , Link,Switch} from \"react-router-dom\"\r\n\r\nimport BlocNotFound404 from '../BlocNotFound404/BlocNotFound404'\r\nimport blocTwo from '../BlocTwo/BlocTwo'\r\nimport CovidMainBloc from '../CovidBloc/Covid.app'\r\nimport blocTree from '../BlocTree/blocTree'\r\n\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nclass SiderDemo extends React.Component {\r\n  state = {\r\n    collapsed: true,\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <Layout>\r\n        <Sider style={{height:'auto'}} trigger={null} collapsible collapsed={this.state.collapsed}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            <Menu.Item key=\"1\" icon={<MedicineBoxOutlined />}>\r\n              <Link to='/'>\r\n              Ковид\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\r\n              <Link to='2'>\r\n                nav 2\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n              <Link to='/3'>\r\n               nav 3\r\n              </Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ paddingLeft: 10 }}>\r\n            {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n              className: 'trigger',\r\n              onClick: this.toggle,\r\n            })}\r\n          </Header>\r\n          <Content\r\n            className=\"site-layout-background\"\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              minHeight: 280,\r\n              backgroundColor:'lavenderblush'\r\n            }}\r\n          >\r\n            <Switch>\r\n              <Route exact path='/' component={CovidMainBloc} />\r\n              <Route path='/2' component={blocTwo} />\r\n              <Route path='/3' component={blocTree} />\r\n              <Route component={BlocNotFound404} />\r\n            </Switch>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n     </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SiderDemo","\nimport SiderDemo from './RenderBloc/RenderBloc'\n\nfunction App() {\n  return (\n    <div>\n      <SiderDemo />\n    </div>\n   \n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}